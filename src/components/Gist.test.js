import React from "react";
import { render } from "@testing-library/react";
import Gist from "./Gist";

// Mock gist data for testing
const mockGist = {
  owner: {
    avatar_url: "https://example.com/avatar.jpg",
    login: "testuser",
  },
  commits_url: "https://example.com/commits",
  forks_url: "https://example.com/forks",
  comments_url: "https://example.com/comments",
  starred_url: "https://example.com/starred",
  files: {
    "file1.txt": {
      raw_url: "https://example.com/file1.txt",
    },
    "file2.txt": {
      raw_url: "https://example.com/file2.txt",
    },
  },
  forks: 2,
  comments: 3,
  stars: 4,
  created_at: "2023-08-30T13:29:45Z",
  updated_at: "2023-08-31T14:30:00Z",
};

describe("Gist Component", () => {
  it("should render user info and links correctly", () => {
    const { getByText, getByAltText } = render(<Gist gist={mockGist} />);

    const userAvatar = getByAltText("testuser");
    const username = getByText("testuser");
    const filesLink = getByText("2 Files");
    const forksLink = getByText("2 Forks");
    const commentsLink = getByText("3 Comments");
    const starsLink = getByText("4 Stars");

    expect(userAvatar).toBeInTheDocument();
    expect(username).toBeInTheDocument();
    expect(filesLink).toBeInTheDocument();
    expect(forksLink).toBeInTheDocument();
    expect(commentsLink).toBeInTheDocument();
    expect(starsLink).toBeInTheDocument();
  });

  it("should render created and last updated dates correctly", () => {
    const { getByText } = render(<Gist gist={mockGist} />);

    const createdAt = getByText("Created at: 8/30/2023");
    const lastUpdated = getByText("Last updated: 8/31/2023");

    expect(createdAt).toBeInTheDocument();
    expect(lastUpdated).toBeInTheDocument();
  });

  it("should render generated by information correctly", () => {
    const { getByText } = render(<Gist gist={mockGist} />);

    const generatedBy = getByText("Generated by: testuser");

    expect(generatedBy).toBeInTheDocument();
  });

  it("should render files links correctly", () => {
    const { getByText } = render(<Gist gist={mockGist} />);

    const file1Link = getByText("file1.txt");
    const file2Link = getByText("file2.txt");

    expect(file1Link).toBeInTheDocument();
    expect(file2Link).toBeInTheDocument();
  });
});
